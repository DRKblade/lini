#pragma once

#include <string_view>
#include <string>
#include <iostream>
#include <vector>
#include <memory>
#include <optional>

using namespace std::literals;
using std::vector, std::endl, std::string, std::move;

constexpr auto DEBUG_SCOPES{"@DEBUG_SCOPES@"sv};

#define NAMESPACE(name) namespace name {
#define NAMESPACE_END }

#define FORMAT_RESET  "\033[0m"
#define FORMAT_SIZE 11
#define FORMAT_EMPTY  "\033[0;36m\033[0m"
#define FORMAT_EMPTY2 "\033[0;36m\033[0m\033[0;36m\033[0m"
#define FORMAT_GREEN(content)  "\033[0;32m"#content FORMAT_RESET
#define FORMAT_BLUE(content)   "\033[0;34m"#content FORMAT_RESET
#define FORMAT_CYAN(content)   "\033[0;36m"#content FORMAT_RESET
#define FORMAT_RED_BOLD(content)    "\033[1;31m"#content FORMAT_RESET
#define FORMAT_GREEN_BOLD(content)  "\033[1;32m"#content FORMAT_RESET
#define FORMAT_YELLOW_BOLD(content) "\033[1;33m"#content FORMAT_RESET
#define FORMAT_BLUE_BOLD(content)   "\033[1;34m"#content FORMAT_RESET

#cmakedefine LG_DBUG(msg) std::cerr << FORMAT_GREEN_BOLD(DEBUG:) " " << msg << std::endl;
#ifndef LG_DBUG
#  define LG_DBUG(msg)
#endif

#define THROW_ERROR(name, msg) throw name##_error(#name "_error: "s + msg)

template<typename Left, typename Right>
Right* assign(Left& left, const std::shared_ptr<Right>& right) {
  left = right;
  return right.get();
}

inline std::optional<unsigned long int> parse_ulong(const char* str, size_t len) {
  char* end;
  auto result = std::strtoul(str, &end, 10);
  if (end != str + len)
    return {};
  return result;
}

inline unsigned long int force_parse_ulong(const char* str, size_t len) {
  char* end;
  auto result = std::strtoul(str, &end, 10);
  if (end != str + len)
    throw std::logic_error("Parse to ulong failed: "s + str);
  return result;
}
inline unsigned long int force_parse_ulong(const string& str) {
  return force_parse_ulong(str.data(), str.size());
}
